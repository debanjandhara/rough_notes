{
  "title": "**Java Programming Quiz**",
  "description": "A quiz to test your fundamental knowledge of the Java programming language, from basic syntax to core concepts.",
  "questions": [
    {
      "id": 1,
      "question": "Identify the interface which is the root of the Java Collections Framework and is used to declare core collection methods.",
      "options": [
        "`Comparator`",
        "`EventListener`",
        "`Set`",
        "`Collection`"
      ],
      "answer": "`Collection`",
      "explanation": "The `Collection` interface is the root of the Java Collections Framework. It defines the most basic methods that all collections must implement, such as `add()`, `remove()`, `size()`, and `iterator()`."
    },
    {
      "id": 2,
      "question": "How many primitive data types are there in Java?",
      "options": [
        "`6`",
        "`7`",
        "`8`",
        "`9`"
      ],
      "answer": "`8`",
      "explanation": "Java has exactly **eight** primitive data types: `byte`, `short`, `int`, `long`, `float`, `double`, `boolean`, and `char`. These are not objects and store the actual values directly in memory."
    },
    {
      "id": 3,
      "question": "What is the size (in bits) of `float` and `double` in Java, respectively?",
      "options": [
        "`32` and `64`",
        "`32` and `32`",
        "`64` and `64`",
        "`64` and `32`"
      ],
      "answer": "`32` and `64`",
      "explanation": "A `float` is a single-precision **32-bit** IEEE 754 floating-point number, and a `double` is a double-precision **64-bit** IEEE 754 floating-point number."
    },
    {
      "id": 4,
      "question": "Automatic type conversion (widening) is possible in which of the following cases without an explicit cast?",
      "options": [
        "`byte` to `int`",
        "`int` to `long`",
        "`long` to `int`",
        "`short` to `int`"
      ],
      "answer": "`int` to `long`",
      "explanation": "Automatic type conversion (widening) occurs when converting from a smaller data type to a larger one where no data loss can occur. A `long` (64-bit) can safely hold any `int` (32-bit) value. Converting from `long` to `int` is a **narrowing** conversion and requires an explicit cast, as it may result in data loss."
    },
    {
      "id": 5,
      "question": "Find the output of the following Java code snippet:\n```java\nint integer = 24;\nchar aChar = 'I';\nSystem.out.print(integer);\nSystem.out.print(aChar);\n```",
      "options": [
        "`Compile Error`",
        "`Throws Exception`",
        "`24I`",
        "`24 I`"
      ],
      "answer": "`24I`",
      "explanation": "`System.out.print()` prints its argument to the console without adding a newline. The first call prints `24`, and the second call prints `I` immediately after it on the same line, resulting in `24I`."
    },
    {
      "id": 6,
      "question": "Find the output of the following program:\n```java\npublic class Solution {\n    public static void main(String[] args) {\n        short x = 10;\n        x = x * 5; // This line is problematic\n        System.out.print(x);\n    }\n}\n```",
      "options": [
        "`50`",
        "`Compiler Error`",
        "`Runtime Exception`",
        "`10`"
      ],
      "answer": "`Compiler Error`",
      "explanation": "In Java, arithmetic operations on smaller integer types like `byte` or `short` automatically promote the operands to `int`. The result of `x * 5` is an `int`. Assigning this `int` result back to the `short` variable `x` without an explicit cast `(short)(x * 5)` causes a type mismatch and thus a **compiler error**."
    },
    {
      "id": 7,
      "question": "Find the output of the following program:\n```java\npublic class Solution {\n    public static void main(String[] args) {\n        byte x = 127;\n        x++;\n        x++;\n        System.out.print(x);\n    }\n}\n```",
      "options": [
        "`129`",
        "`-128`",
        "`-127`",
        "`Compiler Error`"
      ],
      "answer": "`-127`",
      "explanation": "A `byte` in Java has a range from **-128 to 127**. When `x` is `127` (its maximum value), the first `x++` causes it to overflow and wrap around to its minimum value, `-128`. The second `x++` then increments `-128` to `-127`."
    },
    {
      "id": 8,
      "question": "Select the valid statement to declare and instantiate a character array of size 5.",
      "options": [
        "`char[] ch = new char(5);`",
        "`char[] ch = new char[5];`",
        "`char[] ch = new char();`",
        "`char ch = new char[5];`"
      ],
      "answer": "`char[] ch = new char[5];`",
      "explanation": "This is the correct syntax to declare and instantiate an array in Java. The size of the array must be specified within square brackets `[]`, not parentheses `()`."
    },
    {
      "id": 9,
      "question": "When an array is passed to a method in Java, what does the method receive?",
      "options": [
        "The reference of the array",
        "A complete copy of the array",
        "The length of the array",
        "A copy of the first element"
      ],
      "answer": "The reference of the array",
      "explanation": "In Java, objects and arrays are passed by value, but the 'value' being passed is the **memory reference**. Therefore, the method receives a copy of the reference that points to the original array in the heap, allowing the method to modify the contents of that original array."
    },
    {
      "id": 10,
      "question": "Find the value of `a[1]` after execution of the following program:\n```java\nint[] a = {0, 2, 4, 1, 3};\nfor (int i = 0; i < a.length; i++) {\n    a[i] = a[(a[i] + 3) % a.length];\n}\n```",
      "options": [
        "`1`",
        "`2`",
        "`3`",
        "`4`"
      ],
      "answer": "`1`",
      "explanation": "The array is modified in place. Let's trace the execution:\n- **Initial:** `a` is `{0, 2, 4, 1, 3}`\n- **i=0:** `a[0] = a[(0+3)%5] = a[3] = 1`. Array becomes `{1, 2, 4, 1, 3}`.\n- **i=1:** `a[1] = a[(2+3)%5] = a[0] = 1`. Array becomes `{1, 1, 4, 1, 3}`.\n- **i=2:** `a[2] = a[(4+3)%5] = a[2] = 4`. Array becomes `{1, 1, 4, 1, 3}`.\n- **i=3:** `a[3] = a[(1+3)%5] = a[4] = 3`. Array becomes `{1, 1, 4, 3, 3}`.\n- **i=4:** `a[4] = a[(3+3)%5] = a[1] = 1`. Array becomes `{1, 1, 4, 3, 1}`.\n\nAfter the loop, the value of `a[1]` is `1`."
    },
    {
      "id": 11,
      "question": "In Java, arrays are:",
      "options": [
        "Object references",
        "Objects",
        "Primitive data types",
        "None of the above"
      ],
      "answer": "Objects",
      "explanation": "In Java, arrays are **objects**. They are created dynamically on the heap, have properties (like `.length`), and inherit methods from the `Object` class."
    },
    {
      "id": 12,
      "question": "When is an object created with the `new` keyword?",
      "options": [
        "At run time",
        "At compile time",
        "Depends on the code",
        "During linking"
      ],
      "answer": "At run time",
      "explanation": "The `new` keyword performs dynamic memory allocation on the heap. This process happens when the program is executing (**run time**), not during compilation."
    },
    {
      "id": 13,
      "question": "Given the following code, what can directly access and change the value of the variable `res`?\n```java\npackage com.mypackage;\n\npublic class Solution {\n    private int res = 100;\n}\n```",
      "options": [
        "Only the `Solution` class",
        "Any class in the `com.mypackage` package",
        "Any subclass of `Solution`",
        "Any class in the application"
      ],
      "answer": "Only the `Solution` class",
      "explanation": "The `private` access modifier restricts access to a member (variable or method) exclusively to the class in which it is declared. No other class, not even a subclass, can access it directly."
    },
    {
      "id": 14,
      "question": "In which core Java class is the `toString()` method defined?",
      "options": [
        "`java.lang.Object`",
        "`java.lang.String`",
        "`java.lang.util.Objects`",
        "`java.io.Serializable`"
      ],
      "answer": "`java.lang.Object`",
      "explanation": "The `toString()` method is originally defined in the `java.lang.Object` class. Since `Object` is the ultimate superclass of all classes in Java, every object inherits this method."
    },
    {
      "id": 15,
      "question": "The `compareTo()` method from the `Comparable` interface returns:",
      "options": [
        "A `boolean` value (`true` or `false`)",
        "An `int` value",
        "A `String` representation",
        "A `long` value"
      ],
      "answer": "An `int` value",
      "explanation": "The `compareTo()` method, from the `Comparable` interface, returns an `int`. It returns:\n- A **negative integer** if the current object is less than the argument.\n- **Zero** if they are equal.\n- A **positive integer** if the current object is greater than the argument."
    },
    {
      "id": 16,
      "question": "Identify the output of the following program:\n```java\nString str = \"ABCDE\";\nSystem.out.println(str.substring(1, 3));\n```",
      "options": [
        "`ABC`",
        "`BC`",
        "`BCD`",
        "`B`"
      ],
      "answer": "`BC`",
      "explanation": "The `substring(beginIndex, endIndex)` method extracts characters from `beginIndex` up to, but **not including**, `endIndex`. In `\"ABCDE\"`, this is the character at index 1 (`B`) and index 2 (`C`)."
    },
    {
      "id": 17,
      "question": "Identify the output of the following program:\n```java\nString str = \"HELLOWORLD\";\nSystem.out.println(str.indexOf('T'));\n```",
      "options": [
        "`0`",
        "`1`",
        "`true`",
        "`-1`"
      ],
      "answer": "`-1`",
      "explanation": "The `indexOf()` method returns the index of the first occurrence of a character. If the character is not found in the string, it returns `-1`. The character 'T' is not present in `\"HELLOWORLD\"`."
    },
    {
      "id": 18,
      "question": "Identify the output of the following program:\n```java\npublic class Test {\n    public static void main(String args[]) {\n        String str1 = \"ONE\";\n        String str2 = \"TWO\";\n        System.out.println(str1.concat(str2));\n    }\n}\n```",
      "options": [
        "`ONETWO`",
        "`ONE TWO`",
        "`Compiler Error`",
        "`null`"
      ],
      "answer": "`ONETWO`",
      "explanation": "The `String.concat()` method appends one string to the end of another, returning a new string. Here, `\"TWO\"` is appended to `\"ONE\"`, resulting in `\"ONETWO\"`."
    },
    {
      "id": 19,
      "question": "What is the result of the following operation?\n```java\nString str1 = \"INTERVIEWBIT\".replace('E', 'S');\n```",
      "options": [
        "It replaces only the first 'E' with 'S'.",
        "It returns a new string with all 'E's replaced by 'S's.",
        "It modifies the original string, replacing all 'E's.",
        "It throws a `RuntimeException`."
      ],
      "answer": "It returns a new string with all 'E's replaced by 'S's.",
      "explanation": "The `String.replace(char, char)` method returns a **new string** where *all* occurrences of the first character are replaced by the second character. The original string remains unchanged because `String` objects are immutable in Java."
    },
    {
      "id": 20,
      "question": "Find the output of the following code snippet:\n```java\nint ++a = 100;\nSystem.out.println(++a);\n```",
      "options": [
        "`101`",
        "`Compiler Error: invalid assignment`",
        "`100`",
        "`Runtime Exception`"
      ],
      "answer": "`Compiler Error: invalid assignment`",
      "explanation": "The left side of an assignment operator (`=`) must be a variable (an l-value). `++a` is an expression that evaluates to a value, but it is not a variable location where a value can be stored. This is a syntax error, resulting in a **compiler error**."
    },
    {
      "id": 21,
      "question": "Find the output of the following code:\n```java\nif (1 + 1 + 1 + 1 + 1 == 5) {\n    System.out.print(\"TRUE\");\n} else {\n    System.out.print(\"FALSE\");\n}\n```",
      "options": [
        "`TRUE`",
        "`FALSE`",
        "`Compile Error`",
        "`5`"
      ],
      "answer": "`TRUE`",
      "explanation": "The expression `1 + 1 + 1 + 1 + 1` is a simple arithmetic operation that evaluates to `5`. The condition `5 == 5` is **true**, so the code within the `if` block is executed, printing `\"TRUE\"`."
    },
    {
      "id": 22,
      "question": "Find the output of the following code:\n```java\npublic class Solution {\n    public static void main(String... args) {\n        int x = 5;\n        x *= (3 + 7);\n        System.out.println(x);\n    }\n}\n```",
      "options": [
        "`50`",
        "`22`",
        "`38`",
        "`Compiler Error`"
      ],
      "answer": "`50`",
      "explanation": "Due to operator precedence, the expression in the parentheses is evaluated first: `(3 + 7)` equals `10`. The statement then becomes `x *= 10`, which is shorthand for `x = x * 10`. Since `x` is `5`, the result is `5 * 10 = 50`."
    },
    {
      "id": 23,
      "question": "Find the output of the following code:\n```java\npublic class Solution {\n    public static void main(String args[]) {\n        int i;\n        for (i = 1; i < 6; i++) {\n            if (i > 3) {\n                continue;\n            }\n        }\n        System.out.println(i);\n    }\n}\n```",
      "options": [
        "`3`",
        "`4`",
        "`5`",
        "`6`"
      ],
      "answer": "`6`",
      "explanation": "The `for` loop iterates with `i` from 1 to 5. The `continue` statement skips the rest of the loop body for `i=4` and `i=5`. The loop condition `i < 6` becomes false when `i` is incremented to `6`. The `System.out.println(i)` statement is **outside** the loop, so it prints the final value of `i`, which is `6`."
    },
    {
      "id": 24,
      "question": "How many times will `\"INTERVIEWBIT\"` be printed by the following loop?\n```java\nint count = 0;\ndo {\n    System.out.println(\"INTERVIEWBIT\");\n    count++;\n} while (count < 10);\n```",
      "options": [
        "`9`",
        "`10`",
        "`11`",
        "`Infinitely`"
      ],
      "answer": "`10`",
      "explanation": "A `do-while` loop executes its body first and then checks the condition. The loop will execute for `count` values of 0, 1, 2, 3, 4, 5, 6, 7, and 9. After the 10th iteration, `count` becomes 10, the condition `10 < 10` is false, and the loop terminates. This results in a total of **10** executions."
    },
    {
      "id": 25,
      "question": "Which of the following is an infinite loop in Java?",
      "options": [
        "`for (;;) {}`",
        "`for (int i = 0; i < 1; i--) {}`",
        "`for (int i = 0; ; i++) {}`",
        "All of the above"
      ],
      "answer": "All of the above",
      "explanation": "All three options represent infinite loops:\n- `for (;;)` has no initialization, condition, or increment, so its empty condition is treated as `true`.\n- `for (int i = 0; i < 1; i--)` initializes `i` to 0 and decrements it, so `i` will always be less than 1.\n- `for (int i = 0; ; i++)` has no termination condition, so it will loop forever."
    },
    {
      "id": 26,
      "question": "In the context of Java concurrency, what is `Runnable`?",
      "options": [
        "An abstract class",
        "An interface",
        "A concrete class",
        "A method"
      ],
      "answer": "An interface",
      "explanation": "`java.lang.Runnable` is a functional **interface** in Java. It defines a single abstract method, `run()`, and is the primary way to define a task that a `Thread` will execute."
    },
    {
      "id": 27,
      "question": "An exception thrown within a `try` block is handled by which corresponding block?",
      "options": [
        "`catch`",
        "`throw`",
        "`finally`",
        "`throws`"
      ],
      "answer": "`catch`",
      "explanation": "In Java's exception handling, code that may throw an exception is placed in a `try` block. If an exception occurs, the program flow is transferred to a corresponding `catch` block designed to handle that specific type of exception."
    },
    {
      "id": 28,
      "question": "Which command-line tool from the JDK is used to find and fix bugs in a Java program?",
      "options": [
        "`jdk`",
        "`jre`",
        "`jvm`",
        "`jdb`"
      ],
      "answer": "`jdb`",
      "explanation": "`jdb` stands for **Java Debugger**. It is a command-line tool included in the JDK (Java Development Kit) used for debugging Java applications. The other acronyms stand for:\n- `JRE`: Java Runtime Environment\n- `JVM`: Java Virtual Machine"
    },
    {
      "id": 29,
      "question": "Which of the following is **not** considered a core feature of Java?",
      "options": [
        "Object-Oriented",
        "Use of pointers",
        "Dynamic",
        "Architecture-Neutral"
      ],
      "answer": "Use of pointers",
      "explanation": "A key design feature of Java is the **absence of explicit pointer arithmetic**, which is common in languages like C/C++. This makes Java safer by preventing direct memory manipulation. While Java uses references internally, it does not allow the 'use of pointers' by the programmer."
    },
    {
      "id": 30,
      "question": "What does the bitwise operator `>>>>` do in Java?",
      "options": [
        "Signed Right Shift",
        "Signed Left Shift",
        "Unsigned (Zero-fill) Right Shift",
        "Bitwise NOT"
      ],
      "answer": "Unsigned (Zero-fill) Right Shift",
      "explanation": "The `>>>>` operator is the **unsigned right shift** operator. It shifts the bits of a number to the right and fills the new bits on the left with **zeros**, regardless of the original sign of the number. This is different from the signed right shift `>>`, which preserves the sign bit."
    }
  ]
}
